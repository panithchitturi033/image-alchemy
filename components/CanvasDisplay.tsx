
import React from 'react';
import type { View } from '../types';
import { DownloadIcon, ImageIcon } from './common/Icons';
import { Spinner } from './common/Spinner';

interface CanvasDisplayProps {
  isLoading: boolean;
  image: string | null;
  sourceImage: string | null | undefined;
  view: View;
}

const Placeholder: React.FC = () => (
  <div className="w-full h-full flex flex-col items-center justify-center text-center p-8 border-2 border-dashed border-white/20 rounded-2xl">
    <ImageIcon className="w-16 h-16 text-white/30 mb-4" />
    <h3 className="text-xl font-semibold text-white/80">Aether Canvas</h3>
    <p className="text-white/50 mt-2">Your generated images will appear here.</p>
  </div>
);

const DownloadButton: React.FC<{ imageUrl: string }> = ({ imageUrl }) => (
  <a
    href={imageUrl}
    download="ImageAlchemy_creation.png"
    className="absolute top-4 right-4 bg-black/60 backdrop-blur-md text-white p-3 rounded-full hover:bg-purple-600 transition-all duration-300 transform hover:scale-110"
    aria-label="Download Image"
  >
    <DownloadIcon className="w-6 h-6" />
  </a>
);

export const CanvasDisplay: React.FC<CanvasDisplayProps> = ({ isLoading, image, sourceImage, view }) => {
  const displayedImage = view === 'EDITING' && !image ? sourceImage : image;

  return (
    <div className="relative aspect-square w-full bg-black/30 backdrop-blur-xl border border-white/10 rounded-2xl shadow-2xl flex items-center justify-center p-4">
      {isLoading && <Spinner />}
      
      {!isLoading && !displayedImage && <Placeholder />}
      
      {displayedImage && !isLoading && (
        <div className="relative w-full h-full">
          <img
            src={displayedImage}
            alt="Generated by AI"
            className="w-full h-full object-contain rounded-lg animate-fade-in"
          />
          {image && <DownloadButton imageUrl={image} />}
        </div>
      )}
      <style>{`
        @keyframes fade-in {
          from { opacity: 0; transform: scale(0.95); }
          to { opacity: 1; transform: scale(1); }
        }
        .animate-fade-in {
          animation: fade-in 0.5s ease-out forwards;
        }
      `}</style>
    </div>
  );
};
